{"version":3,"names":["RTCDataPacketCryptorFactory","RTCFrameCryptorAlgorithm","RTCFrameCryptorFactory","ParticipantEvent","RoomEvent","EncryptionEvent","Mutex","EventEmitter","RNE2EEManager","constructor","keyProvider","dcEncryptionEnabled","_defineProperty","Map","kAesGcm","undefined","encryptionEnabled","dataChannelEncryptionEnabled","isEnabled","isDataChannelEncryptionEnabled","value","setup","room","setupEventListeners","localParticipant","on","LocalTrackPublished","publication","setupE2EESender","LocalTrackUnpublished","frameCryptor","findTrackCryptor","trackSid","frameCryptors","delete","setEnabled","dispose","TrackSubscribed","_track","pub","participant","setupE2EEReceiver","TrackUnsubscribed","_participant","SignalConnected","TypeError","setParticipantCryptorEnabled","isE2EEEnabled","identity","isEncrypted","createFrameCryptorForSender","track","sender","set","setKeyIndex","getLatestKeyIndex","createFrameCryptorForReceiver","receiver","setSifTrailer","trailer","getDataPacketCryptor","dataPacketCryptor","unlock","dataPacketCryptorLock","lock","createDataPacketCryptor","algorithm","rtcKeyProvider","encryptData","data","Error","participantId","encryptedPacket","encrypt","uuid","payload","iv","keyIndex","handleEncryptedData","participantIdentity","packet","decryptedData","decrypt","trackId","get","createFrameCryptorForRtpSender","createFrameCryptorForRtpReceiver","setupEngine","_engine","enabled","_this$room","emit","ParticipantEncryptionStatusChanged","_this$room2","getParticipantByIdentity"],"sources":["RNE2EEManager.ts"],"sourcesContent":["import {\n  RTCDataPacketCryptor,\n  RTCDataPacketCryptorFactory,\n  RTCFrameCryptorAlgorithm,\n  RTCFrameCryptorFactory,\n  RTCRtpReceiver,\n  type RTCEncryptedPacket,\n  type RTCFrameCryptor,\n  type RTCRtpSender,\n} from '@livekit/react-native-webrtc';\nimport {\n  LocalParticipant,\n  LocalTrackPublication,\n  ParticipantEvent,\n  RemoteParticipant,\n  RemoteTrackPublication,\n  RoomEvent,\n  type Room,\n  type BaseE2EEManager,\n  type E2EEManagerCallbacks,\n  EncryptionEvent,\n  type DecryptDataResponseMessage,\n  type EncryptDataResponseMessage,\n  Mutex,\n} from 'livekit-client';\nimport type RNKeyProvider from './RNKeyProvider';\nimport type RTCEngine from 'livekit-client/dist/src/room/RTCEngine';\nimport EventEmitter from 'events';\nimport type TypedEventEmitter from 'typed-emitter';\n\n/**\n * @experimental\n */\nexport default class RNE2EEManager\n  extends (EventEmitter as new () => TypedEventEmitter<E2EEManagerCallbacks>)\n  implements BaseE2EEManager\n{\n  private room?: Room;\n  private frameCryptors: Map<string, RTCFrameCryptor> = new Map();\n  private keyProvider: RNKeyProvider;\n  private algorithm: RTCFrameCryptorAlgorithm =\n    RTCFrameCryptorAlgorithm.kAesGcm;\n\n  private encryptionEnabled: boolean = false;\n  private dataChannelEncryptionEnabled: boolean = false;\n\n  private dataPacketCryptorLock = new Mutex();\n  private dataPacketCryptor: RTCDataPacketCryptor | undefined = undefined;\n  constructor(\n    keyProvider: RNKeyProvider,\n    dcEncryptionEnabled: boolean = false\n  ) {\n    super();\n    this.keyProvider = keyProvider;\n    this.encryptionEnabled = false;\n    this.dataChannelEncryptionEnabled = dcEncryptionEnabled;\n  }\n\n  get isEnabled(): boolean {\n    return this.encryptionEnabled;\n  }\n  get isDataChannelEncryptionEnabled(): boolean {\n    return this.isEnabled && this.dataChannelEncryptionEnabled;\n  }\n  set isDataChannelEncryptionEnabled(value: boolean) {\n    this.dataChannelEncryptionEnabled = value;\n  }\n\n  setup(room: Room) {\n    if (this.room !== room) {\n      this.room = room;\n      this.setupEventListeners(room);\n    }\n  }\n\n  private setupEventListeners(room: Room) {\n    room.localParticipant\n      .on(ParticipantEvent.LocalTrackPublished, async (publication) => {\n        this.setupE2EESender(publication, room.localParticipant);\n      })\n      .on(ParticipantEvent.LocalTrackUnpublished, async (publication) => {\n        let frameCryptor = this.findTrackCryptor(publication.trackSid);\n        if (frameCryptor) {\n          this.frameCryptors.delete(publication.trackSid);\n          await frameCryptor.setEnabled(false);\n          await frameCryptor.dispose();\n        }\n      });\n\n    room\n      .on(RoomEvent.TrackSubscribed, (_track, pub, participant) => {\n        this.setupE2EEReceiver(pub, participant);\n      })\n      .on(\n        RoomEvent.TrackUnsubscribed,\n        async (_track, publication, _participant) => {\n          let frameCryptor = this.findTrackCryptor(publication.trackSid);\n          if (frameCryptor) {\n            this.frameCryptors.delete(publication.trackSid);\n            await frameCryptor.setEnabled(false);\n            await frameCryptor.dispose();\n          }\n        }\n      )\n      .on(RoomEvent.SignalConnected, () => {\n        if (!this.room) {\n          throw new TypeError(`expected room to be present on signal connect`);\n        }\n        this.setParticipantCryptorEnabled(\n          this.room.localParticipant.isE2EEEnabled,\n          this.room.localParticipant.identity\n        );\n      });\n  }\n\n  private async setupE2EESender(\n    publication: LocalTrackPublication,\n    participant: LocalParticipant\n  ) {\n    if (!publication.isEncrypted) {\n      return;\n    }\n\n    var frameCryptor = this.findTrackCryptor(publication.trackSid);\n\n    if (!frameCryptor) {\n      frameCryptor = this.createFrameCryptorForSender(\n        publication.track!.sender,\n        participant.identity\n      );\n\n      this.frameCryptors.set(publication.trackSid, frameCryptor);\n      frameCryptor.setEnabled(true);\n      frameCryptor.setKeyIndex(\n        this.keyProvider.getLatestKeyIndex(participant.identity)\n      );\n    }\n  }\n\n  private async setupE2EEReceiver(\n    publication: RemoteTrackPublication,\n    participant: RemoteParticipant\n  ) {\n    if (!publication.isEncrypted) {\n      return;\n    }\n\n    var frameCryptor = this.findTrackCryptor(publication.trackSid);\n\n    if (!frameCryptor) {\n      frameCryptor = this.createFrameCryptorForReceiver(\n        publication.track!.receiver,\n        participant.identity\n      );\n\n      this.frameCryptors.set(publication.trackSid, frameCryptor);\n      frameCryptor.setEnabled(true);\n      frameCryptor.setKeyIndex(\n        this.keyProvider.getLatestKeyIndex(participant.identity)\n      );\n    }\n  }\n\n  setSifTrailer(trailer: Uint8Array): void {\n    this.keyProvider.setSifTrailer(trailer);\n  }\n\n  private async getDataPacketCryptor(): Promise<RTCDataPacketCryptor> {\n    let dataPacketCryptor = this.dataPacketCryptor;\n    if (dataPacketCryptor) {\n      return dataPacketCryptor;\n    }\n\n    let unlock = await this.dataPacketCryptorLock.lock();\n\n    try {\n      dataPacketCryptor = this.dataPacketCryptor;\n      if (dataPacketCryptor) {\n        return dataPacketCryptor;\n      }\n\n      dataPacketCryptor =\n        await RTCDataPacketCryptorFactory.createDataPacketCryptor(\n          this.algorithm,\n          this.keyProvider.rtcKeyProvider\n        );\n\n      this.dataPacketCryptor = dataPacketCryptor;\n      return dataPacketCryptor;\n    } finally {\n      unlock();\n    }\n  }\n  async encryptData(\n    data: Uint8Array\n  ): Promise<EncryptDataResponseMessage['data']> {\n    let room = this.room;\n    if (!room) {\n      throw new Error(\"e2eemanager isn't setup with room!\");\n    }\n\n    let participantId = room.localParticipant.identity;\n\n    let dataPacketCryptor = await this.getDataPacketCryptor();\n\n    let encryptedPacket = await dataPacketCryptor.encrypt(\n      participantId,\n      this.keyProvider.getLatestKeyIndex(participantId),\n      data\n    );\n\n    if (!encryptedPacket) {\n      throw new Error('encryption for packet failed');\n    }\n    return {\n      uuid: '', //not used\n      payload: encryptedPacket.payload,\n      iv: encryptedPacket.iv,\n      keyIndex: encryptedPacket.keyIndex,\n    };\n  }\n\n  async handleEncryptedData(\n    payload: Uint8Array,\n    iv: Uint8Array,\n    participantIdentity: string,\n    keyIndex: number\n  ): Promise<DecryptDataResponseMessage['data']> {\n    let packet = {\n      payload,\n      iv,\n      keyIndex,\n    } satisfies RTCEncryptedPacket;\n\n    let dataPacketCryptor = await this.getDataPacketCryptor();\n    let decryptedData = await dataPacketCryptor.decrypt(\n      participantIdentity,\n      packet\n    );\n\n    if (!decryptedData) {\n      throw new Error('decryption for packet failed');\n    }\n\n    return {\n      uuid: '', //not used\n      payload: decryptedData,\n    } satisfies DecryptDataResponseMessage['data'];\n  }\n\n  // Utility methods\n  //////////////////////\n\n  private findTrackCryptor(trackId: string): RTCFrameCryptor | undefined {\n    return this.frameCryptors.get(trackId);\n  }\n\n  private createFrameCryptorForSender(\n    sender: RTCRtpSender,\n    participantId: string\n  ): RTCFrameCryptor {\n    return RTCFrameCryptorFactory.createFrameCryptorForRtpSender(\n      participantId,\n      sender,\n      this.algorithm,\n      this.keyProvider.rtcKeyProvider\n    );\n  }\n\n  private createFrameCryptorForReceiver(\n    receiver: RTCRtpReceiver,\n    participantId: string\n  ): RTCFrameCryptor {\n    return RTCFrameCryptorFactory.createFrameCryptorForRtpReceiver(\n      participantId,\n      receiver,\n      this.algorithm,\n      this.keyProvider.rtcKeyProvider\n    );\n  }\n\n  setupEngine(_engine: RTCEngine): void {\n    // No-op\n  }\n  setParticipantCryptorEnabled(\n    enabled: boolean,\n    participantIdentity: string\n  ): void {\n    if (\n      this.encryptionEnabled !== enabled &&\n      participantIdentity === this.room?.localParticipant.identity\n    ) {\n      this.encryptionEnabled = enabled;\n      this.emit(\n        EncryptionEvent.ParticipantEncryptionStatusChanged,\n        enabled,\n        this.room!.localParticipant\n      );\n    } else {\n      const participant =\n        this.room?.getParticipantByIdentity(participantIdentity);\n      if (!participant) {\n        throw TypeError(\n          `couldn't set encryption status, participant not found ${participantIdentity}`\n        );\n      }\n      this.emit(\n        EncryptionEvent.ParticipantEncryptionStatusChanged,\n        enabled,\n        participant\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}