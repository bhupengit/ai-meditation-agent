import 'well-known-symbols/Symbol.asyncIterator/auto';
import 'well-known-symbols/Symbol.iterator/auto';
import './polyfills/MediaRecorderShim';
import './polyfills/EncoderDecoderTogether.min.js';
import AudioSession, { AndroidAudioTypePresets, type AndroidAudioTypeOptions, type AppleAudioCategory, type AppleAudioCategoryOption, type AppleAudioConfiguration, type AppleAudioMode, type AudioTrackState, getDefaultAppleAudioConfigurationForMode } from './audio/AudioSession';
import type { AudioConfiguration } from './audio/AudioSession';
import type { LogLevel, SetLogLevelOptions } from './logger';
import RNE2EEManager from './e2ee/RNE2EEManager';
import RNKeyProvider, { type RNKeyProviderOptions } from './e2ee/RNKeyProvider';
export interface RegisterGlobalsOptions {
    /**
     * Automatically configure audio session before accessing microphone.
     * When enabled, sets the iOS audio category to 'playAndRecord' before getUserMedia.
     *
     * @default true
     * @platform ios
     */
    autoConfigureAudioSession?: boolean;
}
/**
 * Registers the required globals needed for LiveKit to work.
 *
 * Must be called before using LiveKit.
 *
 * @param options Optional configuration for global registration
 */
export declare function registerGlobals(options?: RegisterGlobalsOptions): void;
export * from './hooks';
export * from './components/BarVisualizer';
export * from './components/LiveKitRoom';
export * from './components/VideoTrack';
export * from './components/VideoView';
export * from './useParticipant';
export * from './useRoom';
export * from './logger';
export * from './audio/AudioManager';
export { AudioSession, RNE2EEManager, RNKeyProvider, AndroidAudioTypePresets, getDefaultAppleAudioConfigurationForMode, };
export type { AudioConfiguration, AndroidAudioTypeOptions, AppleAudioCategory, AppleAudioCategoryOption, AppleAudioConfiguration, AppleAudioMode, AudioTrackState, LogLevel, SetLogLevelOptions, RNKeyProviderOptions, };
