export const __esModule: boolean;
export default RNE2EEManager;
declare const RNE2EEManager_base: any;
/**
 * @experimental
 */
declare class RNE2EEManager extends RNE2EEManager_base {
    [x: string]: any;
    constructor(keyProvider: any, dcEncryptionEnabled?: boolean);
    keyProvider: any;
    encryptionEnabled: boolean;
    dataChannelEncryptionEnabled: boolean;
    get isEnabled(): boolean;
    set isDataChannelEncryptionEnabled(arg: boolean);
    get isDataChannelEncryptionEnabled(): boolean;
    setup(room: any): void;
    room: any;
    setupEventListeners(room: any): void;
    setupE2EESender(publication: any, participant: any): Promise<void>;
    setupE2EEReceiver(publication: any, participant: any): Promise<void>;
    setSifTrailer(trailer: any): void;
    getDataPacketCryptor(): Promise<any>;
    dataPacketCryptor: any;
    encryptData(data: any): Promise<{
        uuid: string;
        payload: any;
        iv: any;
        keyIndex: any;
    }>;
    handleEncryptedData(payload: any, iv: any, participantIdentity: any, keyIndex: any): Promise<{
        uuid: string;
        payload: any;
    }>;
    findTrackCryptor(trackId: any): any;
    createFrameCryptorForSender(sender: any, participantId: any): any;
    createFrameCryptorForReceiver(receiver: any, participantId: any): any;
    setupEngine(_engine: any): void;
    setParticipantCryptorEnabled(enabled: any, participantIdentity: any): void;
}
