/// <reference types="node" />
/**
 * @experimental
 */
export default class RNE2EEManager extends EventEmitter<[never]> {
    constructor(keyProvider: any, dcEncryptionEnabled?: boolean);
    keyProvider: any;
    encryptionEnabled: boolean;
    dataChannelEncryptionEnabled: boolean;
    get isEnabled(): boolean;
    set isDataChannelEncryptionEnabled(arg: boolean);
    get isDataChannelEncryptionEnabled(): boolean;
    setup(room: any): void;
    room: any;
    setupEventListeners(room: any): void;
    setupE2EESender(publication: any, participant: any): Promise<void>;
    setupE2EEReceiver(publication: any, participant: any): Promise<void>;
    setSifTrailer(trailer: any): void;
    getDataPacketCryptor(): Promise<any>;
    dataPacketCryptor: any;
    encryptData(data: any): Promise<{
        uuid: string;
        payload: any;
        iv: any;
        keyIndex: any;
    }>;
    handleEncryptedData(payload: any, iv: any, participantIdentity: any, keyIndex: any): Promise<{
        uuid: string;
        payload: any;
    }>;
    findTrackCryptor(trackId: any): any;
    createFrameCryptorForSender(sender: any, participantId: any): import("@livekit/react-native-webrtc").RTCFrameCryptor;
    createFrameCryptorForReceiver(receiver: any, participantId: any): import("@livekit/react-native-webrtc").RTCFrameCryptor;
    setupEngine(_engine: any): void;
    setParticipantCryptorEnabled(enabled: any, participantIdentity: any): void;
}
import EventEmitter from 'events';
